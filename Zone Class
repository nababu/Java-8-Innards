import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

class Solution
{
public static String [] findingZonesInstant(String [] inputZones, int n, String inputDateTime){
       //Write your code here
        String[] zonesResult = new String[n];

        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse(inputDateTime, formatter1);

        ZonedDateTime kolkataTime = ZonedDateTime.of(dateTime, ZoneId.of("Asia/Kolkata"));
        DateTimeFormatter formatter2 = DateTimeFormatter.ISO_ZONED_DATE_TIME;
        for(int i = 0; i < n; i++) {

            ZonedDateTime res = kolkataTime.withZoneSameInstant(ZoneId.of(inputZones[i]));
            zonesResult[i] = formatter2.format(res);
        }

        return zonesResult;
   }
}

public class ZoneClass 
{
public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine().trim());
    String [] inputZones = new String [n];
    for (int i = 0; i < n; i++) {
        inputZones[i] = br.readLine();
    }
    String inputDateTime = br.readLine();
    br.close();
    String result [] = Solution.findingZonesInstant(inputZones, n, inputDateTime);
    for (int i = 0; i < n; i++) {
    System.out.println(result[i]);
    }
 }
}
